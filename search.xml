<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java使用阿里云oss</title>
    <url>/2020/03/21/Java%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91oss/</url>
    <content><![CDATA[<p>谈一谈：<br>1.什么是阿里云OSS？<br>答：阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。  </p>
<span id="more"></span>

<p>2.阿里云OSS的价钱？<br>答：<br><img src="https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/5716154851/p37270.png" alt="计费图"></p>
<h1>正文</h1>
注意：请自先创建好仓库

<p>博主项目：<a href="https://github.com/FallngSakura/aliyun-oss">GitHub</a></p>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>提示：博主使用的是springboot项目</p>
<h3 id="导入Maven依赖"><a href="#导入Maven依赖" class="headerlink" title="导入Maven依赖"></a>导入Maven依赖</h3><p>提示：如果下载比较慢可以参考<a href="/2020/03/16/%E4%BF%AE%E6%94%B9Maven%E4%BB%93%E5%BA%93%E4%B8%BA%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8F/" title="修改Maven仓库为阿里镜像">修改Maven仓库为阿里镜像</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">   <span class="tag"><<span class="name">groupId</span>></span>com.aliyun.oss<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">   <span class="tag"><<span class="name">artifactId</span>></span>aliyun-sdk-oss<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">   <span class="tag"><<span class="name">version</span>></span>3.8.0<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependency</span>></span></span><br></pre></td></tr></table></figure>

<h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>提示：关于accessKeyId不知道如何获取可以参考<a href="/2020/02/16/Java%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/" title="Java使用阿里云短信服务">Java使用阿里云短信服务</a></p>
<p>aliyunOSS.properties 文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accessKeyId</span> = <span class="string">*********</span></span><br><span class="line"><span class="attr">accessKeySecret</span> =<span class="string">*****************</span></span><br><span class="line"><span class="attr">endpoint</span> = <span class="string">你仓库地址外链</span></span><br></pre></td></tr></table></figure>

<h3 id="编写Java工具类"><a href="#编写Java工具类" class="headerlink" title="编写Java工具类"></a>编写Java工具类</h3>
<p>AliyunOSS_Util </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.misakinetwork.aliyunoss.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.*;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> MISAKI RINNE</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span> 2019-10-29 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 关于endpoint</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* Endpoint为Bucket的外链，我写了一个常用的endpoint类可以参考里面的外链</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 里面有：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 香港、上海、深圳、成都、杭州、美国硅谷、日本东京</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* /**</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  * 关于初始化配置参数，我提供了2种方式</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  * 1.springboot配置文件方式</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  * 使用的<span class="doctag">@Value</span>进行赋值 如 <span class="doctag">@Value</span>(&quot;$&#123;a.abc&#125;&quot;)</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  * 注意：static属性<span class="doctag">@Value</span>是注解不上去的</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  * 2.aliyunOSS.properties 配置文件方式 具体在static&#123;&#125;代码块里面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String accessKeyId;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String accessKeySecret;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String endpoint;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AliyunOSS_Util.class);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//配置文件初始化</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取accessKeyId and accessKeySecret</span></span><br><span class="line">            properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Objects.requireNonNull(AliyunOSS_Util.class</span><br><span class="line">                    .getClassLoader().getResourceAsStream(<span class="string">&quot;aliyunOSS.properties&quot;</span>))));</span><br><span class="line">      </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//初始化参数</span></span><br><span class="line">        accessKeyId = properties.getProperty(<span class="string">&quot;accessKeyId&quot;</span>);</span><br><span class="line">        json.append(<span class="string">&quot;accessKeyId:&quot;</span>+accessKeyId);</span><br><span class="line">      </span><br><span class="line">        accessKeySecret = properties.getProperty(<span class="string">&quot;accessKeySecret&quot;</span>);</span><br><span class="line">        json.append(<span class="string">&quot;,accessKeySecret:&quot;</span>+accessKeySecret);</span><br><span class="line">      </span><br><span class="line">        endpoint = properties.getProperty(<span class="string">&quot;endpoint&quot;</span>);</span><br><span class="line">        json.append(<span class="string">&quot;,endpoint:&quot;</span>+endpoint+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        logger.info(String.valueOf(json));</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  * 获取OssClient</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OSS <span class="title function_">getOssClient</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">return</span>  <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建存储空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储空间名称，规范请查看官方文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createBucketName</span><span class="params">(String bucketName)</span>&#123;</span><br><span class="line">        <span class="comment">//存储空间</span></span><br><span class="line">        <span class="keyword">final</span> String bucketNames=bucketName;</span><br><span class="line">        <span class="keyword">if</span>(!ossClient.doesBucketExist(bucketName))&#123;</span><br><span class="line">            <span class="comment">//创建存储空间</span></span><br><span class="line">            Bucket bucket=getOssClient().createBucket(bucketName);</span><br><span class="line">            logger.info(<span class="string">&quot;创建存储空间成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> bucket.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bucketNames;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除存储空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName  存储空间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucketName)</span>&#123;</span><br><span class="line">        getOssClient().deleteBucket(bucketName);</span><br><span class="line">        logger.info(<span class="string">&quot;删除&quot;</span> + bucketName + <span class="string">&quot;Bucket成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folder  文件夹名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createFolder</span><span class="params">(String bucketName,String folder)</span>&#123;</span><br><span class="line">        <span class="comment">//文件夹名</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FolderName</span> <span class="operator">=</span>folder+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">        <span class="comment">//判断文件夹是否存在，不存在则创建</span></span><br><span class="line">        <span class="keyword">if</span>(!getOssClient().doesObjectExist(bucketName, FolderName))&#123;</span><br><span class="line">            <span class="comment">//创建文件夹</span></span><br><span class="line">            getOssClient().putObject(bucketName, FolderName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>]));</span><br><span class="line">            logger.info(<span class="string">&quot;创建文件夹成功&quot;</span>);</span><br><span class="line">            <span class="comment">//得到文件夹名</span></span><br><span class="line">            <span class="type">OSSObject</span> <span class="variable">object</span> <span class="operator">=</span> ossClient.getObject(bucketName, FolderName);</span><br><span class="line">            String fileDir=object.getKey();</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">            <span class="keyword">return</span> fileDir;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;文件夹已存在&quot;</span>);</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> FolderName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(String bucketName,String folder,File file)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="keyword">if</span>(!getOssClient().doesObjectExist(bucketName, folder))&#123;</span><br><span class="line">            <span class="comment">//创建文件夹</span></span><br><span class="line">            getOssClient().putObject(bucketName, folder, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>]));</span><br><span class="line">            logger.info(<span class="string">&quot;创建文件夹成功&quot;</span>);</span><br><span class="line">            <span class="comment">//得到文件夹名</span></span><br><span class="line">            <span class="type">OSSObject</span> <span class="variable">object</span> <span class="operator">=</span> ossClient.getObject(bucketName, folder);</span><br><span class="line">            String fileDir=object.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">        getOssClient().putObject(bucketName, folder+<span class="string">&quot;/&quot;</span>+file.getName(),inputStream);</span><br><span class="line">        logger.info(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key删除OSS服务器上的文件</span></span><br><span class="line"><span class="comment">     * 注意：阿里云OSS没有文件夹的概念，</span></span><br><span class="line"><span class="comment">     * 你只要删除了某个文件夹下的所有文件，这个文件夹就会消失，根目录下的除外</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folder 文件夹 如：img/jpg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名 如 abc.jpg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteFile</span><span class="params">( String bucketName, String folder, String fileName)</span> &#123;</span><br><span class="line">        getOssClient().deleteObject(bucketName, folder +<span class="string">&quot;/&quot;</span>+ fileName);</span><br><span class="line">        logger.info(<span class="string">&quot;删除&quot;</span> + bucketName + <span class="string">&quot;下的文件&quot;</span> + folder + fileName + <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传图片至OSS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 上传文件（D:\\image\\adb.jpg）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folder 文件夹名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String 返回的唯一MD5数字签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">uploadImages</span><span class="params">( String bucketName, String folder,File file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resultStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 以输入流的形式上传文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    </span><br><span class="line">            <span class="type">String</span> <span class="variable">lastSuffix</span> <span class="operator">=</span> getLastSuffix(file.getName());</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span>(!(lastSuffix.equals(<span class="string">&quot;jpg&quot;</span>) || lastSuffix.equals(<span class="string">&quot;png&quot;</span>) || lastSuffix.equals(<span class="string">&quot;gif&quot;</span>)))&#123;</span><br><span class="line">                logger.info(lastSuffix+<span class="string">&quot;不支持该文件类型（jpg、png、gif）&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            folder += <span class="string">&quot;/&quot;</span>+lastSuffix+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">            <span class="comment">// 上传文件 (上传文件流的形式)</span></span><br><span class="line">            <span class="type">PutObjectResult</span> <span class="variable">putResult</span> <span class="operator">=</span> getOssClient().putObject(bucketName,</span><br><span class="line">                    folder+file.getName(),is);</span><br><span class="line">            <span class="comment">// 解析结果</span></span><br><span class="line">            logger.info(putResult.getETag());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(<span class="string">&quot;上传阿里云OSS服务器异常.&quot;</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取后缀名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件的后缀名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLastSuffix</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="comment">// 文件的后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileExtension</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;.gif&quot;</span>.equalsIgnoreCase(fileExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;.jpg&quot;</span>.equalsIgnoreCase(fileExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpe&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;.png&quot;</span>.equalsIgnoreCase(fileExtension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 默认返回类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="使用-Test方法测试"><a href="#使用-Test方法测试" class="headerlink" title="使用@Test方法测试"></a>使用@Test方法测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       AliyunOSS_Util.uploadImages(<span class="string">"仓库名称"</span>,<span class="string">"上传路径"</span>,<span class="keyword">new</span> File(<span class="string">"本地文件路径"</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>文章到这里就结束了呀 撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。❀❀❀ <del>~</del></p>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现微信小程序APIV3 支付功能</title>
    <url>/2022/11/24/Java%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FAPIV3%20%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>前言：本篇文章属于Java后端代码实现，并没有前端代码  </p>
</blockquote>
<ol>
<li>准备工作<br>实现微信小程序API V3支付功能先要获取到MCH_ID（商户ID）、MP_APP_ID（小程序APPID）、API_V3KEY（APPV3 密钥）、PRIVATE_KEY（商户证书密钥），具体获取方式请看<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_8_1.shtml">微信小程序支付接入前准备</a></li>
</ol>
<span id="more"></span>
<ol start="2">
<li><p>添加微信支付依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-pay<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--微信支付依赖 v3版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wechatpay-apiv3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wechatpay-apache-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写微信小程序配置类</p>
<blockquote>
<p>注意：文档演示商户证书私钥等数据采用保存在配置类中，可自行使用其他方式保存，提倡使用properties配置文件方式，后期可直接替换文件无需更改代码<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatMiniProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 商户号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MCH_ID</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 商户证书私钥</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;-----END PRIVATE KEY-----\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 商户证书序列号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MCH_SERIAL_NO</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * API_V3密钥</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">API_V3KEY</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 小程序appId</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MP_APP_ID</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MP_APP_SECRET</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * jsapi下单url</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">V3_JSAPI_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/jsapi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 小程序支付异步通知地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MINI_NOTIFY_URL</span> <span class="operator">=</span> <span class="string">&quot;https://xxxx/xxx/xxx/mini/notify/order&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
</blockquote>
</li>
<li><p>编写微信小程序支付工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatMiniUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> CloseableHttpClient <span class="title function_">getHttpClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 加载商户私钥（privateKey：私钥字符串）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">merchantPrivateKey</span> <span class="operator">=</span> PemUtil.loadPrivateKey(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(WeChatMiniProperties.PRIVATE_KEY.getBytes(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line">            <span class="comment">//使用自动更新的签名验证器，不需要传入证书</span></span><br><span class="line">            <span class="type">AutoUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoUpdateCertificatesVerifier</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(WeChatMiniProperties.MCH_ID,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(WeChatMiniProperties.MCH_SERIAL_NO, merchantPrivateKey)),</span><br><span class="line">                    WeChatMiniProperties.API_V3KEY.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="comment">// 初始化httpClient</span></span><br><span class="line">            httpClient = WechatPayHttpClientBuilder.create()</span><br><span class="line">                    .withMerchant(WeChatMiniProperties.MCH_ID, WeChatMiniProperties.MCH_SERIAL_NO, merchantPrivateKey)</span><br><span class="line">                    .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier))</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getSign</span><span class="params">(String appid, String prepay_id, String nonceStr, <span class="type">long</span> timestamp)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造签名串</span></span><br><span class="line">        List&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        strings.add(appid + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        strings.add(timestamp + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        strings.add(nonceStr + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        strings.add(prepay_id + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            builder.append(string);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算签名值</span></span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">rsa</span> <span class="operator">=</span> PemUtil.loadPrivateKey(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(WeChatMiniProperties.PRIVATE_KEY.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">        <span class="type">Sign</span> <span class="variable">sign</span> <span class="operator">=</span> SecureUtil.sign(SignAlgorithm.SHA256withRSA);</span><br><span class="line">        sign.setPrivateKey(rsa);</span><br><span class="line">        <span class="type">byte</span>[] signData = sign.sign(builder.toString().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(signData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 验证签名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [serial, message, signature]请求头中带的序列号, 验签名串, 请求头中的应答签名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">signVerify</span><span class="params">(String serial, String message, String signature)</span> &#123;</span><br><span class="line">        <span class="type">AutoUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载商户私钥（privateKey：私钥字符串）</span></span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">merchantPrivateKey</span> <span class="operator">=</span> PemUtil.loadPrivateKey(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(WeChatMiniProperties.PRIVATE_KEY.getBytes(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用自动更新的签名验证器，不需要传入证书</span></span><br><span class="line">            verifier = <span class="keyword">new</span> <span class="title class_">AutoUpdateCertificatesVerifier</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(WeChatMiniProperties.MCH_ID,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(WeChatMiniProperties.MCH_SERIAL_NO, merchantPrivateKey)),</span><br><span class="line">                    WeChatMiniProperties.API_V3KEY.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> verifier.verify(serial, message.getBytes(<span class="string">&quot;utf-8&quot;</span>), signature);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 解密订单信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [body] 应答报文主体</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decryptOrder</span><span class="params">(String body)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AesUtil</span> <span class="variable">aesUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(WeChatMiniProperties.API_V3KEY.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">node</span> <span class="operator">=</span> objectMapper.readTree(body);</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">resource</span> <span class="operator">=</span> node.get(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> resource.get(<span class="string">&quot;ciphertext&quot;</span>).textValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">associatedData</span> <span class="operator">=</span> resource.get(<span class="string">&quot;associated_data&quot;</span>).textValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> resource.get(<span class="string">&quot;nonce&quot;</span>).textValue();</span><br><span class="line">            <span class="keyword">return</span> aesUtil.decryptToString(associatedData.getBytes(<span class="string">&quot;utf-8&quot;</span>), nonce.getBytes(<span class="string">&quot;utf-8&quot;</span>), ciphertext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GeneralSecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    ** 获取IP地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClientIpAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> getRequest();</span><br><span class="line">        <span class="comment">// 获取请求主机IP地址,如果通过联盟商进来，则透过防火墙获取真实IP地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">headerName</span> <span class="operator">=</span> <span class="string">&quot;x-forwarded-for&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> request.getHeader(headerName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != ip &amp;&amp; ip.length() != <span class="number">0</span> &amp;&amp; !<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">// 多次反向联盟商后会有多个IP值，第一个IP才是真实IP,它们按照英文逗号&#x27;,&#x27;分割</span></span><br><span class="line">            <span class="keyword">if</span> (ip.indexOf(<span class="string">&quot;,&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                ip = ip.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkIp(ip)) &#123;</span><br><span class="line">            headerName = <span class="string">&quot;Proxy-Client-IP&quot;</span>;</span><br><span class="line">            ip = request.getHeader(headerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkIp(ip)) &#123;</span><br><span class="line">            headerName = <span class="string">&quot;WL-Proxy-Client-IP&quot;</span>;</span><br><span class="line">            ip = request.getHeader(headerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkIp(ip)) &#123;</span><br><span class="line">            headerName = <span class="string">&quot;HTTP_CLIENT_IP&quot;</span>;</span><br><span class="line">            ip = request.getHeader(headerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkIp(ip)) &#123;</span><br><span class="line">            headerName = <span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>;</span><br><span class="line">            ip = request.getHeader(headerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkIp(ip)) &#123;</span><br><span class="line">            headerName = <span class="string">&quot;X-Real-IP&quot;</span>;</span><br><span class="line">            ip = request.getHeader(headerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkIp(ip)) &#123;</span><br><span class="line">            headerName = <span class="string">&quot;remote addr&quot;</span>;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">            <span class="comment">// 127.0.0.1 ipv4, 0:0:0:0:0:0:0:1 ipv6</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;127.0.0.1&quot;</span>.equals(ip) || <span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip)) &#123;</span><br><span class="line">                <span class="comment">//根据网卡取本机配置的IP</span></span><br><span class="line">                <span class="type">InetAddress</span> <span class="variable">inet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inet = InetAddress.getLocalHost();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;127.0.0.0&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ip = inet.getHostAddress();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;getClientIp  IP is &quot;</span> + ip + <span class="string">&quot;, headerName = &quot;</span> + headerName);</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WxPayMpOrderResult <span class="title function_">createMiniOrder</span><span class="params">(WxPayUnifiedOrderRequest orderRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 小程序下单</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> getHttpClient();</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(WeChatMiniProperties.V3_JSAPI_URL);</span><br><span class="line">        httpPost.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.addHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; orderParam = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        orderParam.put(<span class="string">&quot;mchid&quot;</span>, WeChatMiniProperties.MCH_ID);</span><br><span class="line">        orderParam.put(<span class="string">&quot;out_trade_no&quot;</span>, orderRequest.getOutTradeNo());</span><br><span class="line">        orderParam.put(<span class="string">&quot;appid&quot;</span>, WeChatMiniProperties.MP_APP_ID);</span><br><span class="line">        orderParam.put(<span class="string">&quot;description&quot;</span>, orderRequest.getBody());</span><br><span class="line">        orderParam.put(<span class="string">&quot;notify_url&quot;</span>, WeChatMiniProperties.MINI_NOTIFY_URL);</span><br><span class="line">        orderParam.put(<span class="string">&quot;amount&quot;</span>, Map.ofEntries(</span><br><span class="line">                entry(<span class="string">&quot;total&quot;</span>, orderRequest.getTotalFee()),</span><br><span class="line">                entry(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">        orderParam.put(<span class="string">&quot;payer&quot;</span>, Map.ofEntries(</span><br><span class="line">                entry(<span class="string">&quot;openid&quot;</span>, orderRequest.getOpenid())</span><br><span class="line">        ));</span><br><span class="line">        log.info(<span class="string">&quot;微信小程序下单请求参数：&#123;&#125;&quot;</span>, JSONUtil.parseObj(orderParam));</span><br><span class="line">        httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">StringEntity</span>(JSONUtil.parseObj(orderParam).toString(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="type">WxPayAppOrderResult</span> <span class="variable">orderResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WxPayAppOrderResult</span>();</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//处理成功返回的数据</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">                com.alibaba.fastjson.<span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(body);</span><br><span class="line">                <span class="comment">//获取预支付交易会话标识  prepay_id</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">prepayId</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;prepay_id&quot;</span>);</span><br><span class="line">                <span class="type">Long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis() / <span class="number">1000L</span>;</span><br><span class="line">                <span class="type">WxPayMpOrderResult</span> <span class="variable">payResult</span> <span class="operator">=</span> WxPayMpOrderResult.builder().appId(WeChatMiniProperties.MP_APP_ID).timeStamp(String.valueOf(timestamp))</span><br><span class="line">                        .nonceStr(orderRequest.getNonceStr()).packageValue(<span class="string">&quot;prepay_id=&quot;</span> + prepayId).signType(<span class="string">&quot;RSA&quot;</span>).build();</span><br><span class="line">                payResult.setPaySign(getSign(WeChatMiniProperties.MP_APP_ID, <span class="string">&quot;prepay_id=&quot;</span> + prepayId, orderRequest.getNonceStr(), timestamp));</span><br><span class="line">                log.info(<span class="string">&quot;微信小程序下单返回参数：&#123;&#125;&quot;</span>,payResult);</span><br><span class="line">                <span class="keyword">return</span> payResult;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;failed,resp code = &quot;</span> + statusCode +</span><br><span class="line">                        <span class="string">&quot;,return body = &quot;</span> + EntityUtils.toString(response.getEntity()));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>支付请求模型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;支付请求模型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxUnifiedOrderParam</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@ApiModelProperty(&quot;订单号id&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> List&lt;Long&gt; ids;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@ApiModelProperty(value = &quot;订单编号不能为空&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> String orderNo;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@ApiModelProperty(value = &quot;交易类型&quot;, example = &quot;APP|JSAPI(小程序也用JSAPI)&quot;)</span></span><br><span class="line">     <span class="meta">@NotNull(message = &quot;交易类型不能为空&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> String tradeType;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@ApiModelProperty(value = &quot;支付金额&quot;, example = &quot;1&quot;)</span></span><br><span class="line">     <span class="meta">@NotNull(message = &quot;支付金额不能为空&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> String payPrice;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层实现下单接口以及支付回调通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;小程序统一下单接口&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/mini/createOrder&quot;)</span></span><br><span class="line"><span class="meta">@AccessLimit(seconds = 3, maxCount = 1)</span></span><br><span class="line"><span class="keyword">public</span> ObjectRestResponse&lt;Object&gt; <span class="title function_">createMiniOrder</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> WxUnifiedOrderParam unifiedOrderParam)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;小程序统一下单接口：&#123;&#125;&quot;</span>, JSON.toJSON(unifiedOrderParam));</span><br><span class="line">    <span class="comment">//较验订单,根据自己业务进行校验，演示案例不进行校验</span></span><br><span class="line">		</span><br><span class="line">    <span class="comment">//获取订单，请根据自己需求修改代码</span></span><br><span class="line">    List&lt;Order&gt; orderList = orderService.listByIds(unifiedOrderParam.getIds());</span><br><span class="line">  	<span class="type">WxPayUnifiedOrderRequest</span> <span class="variable">orderRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WxPayUnifiedOrderRequest</span>();</span><br><span class="line">    orderRequest.setBody(<span class="string">&quot;XXX商品购买&quot;</span>);</span><br><span class="line">   <span class="type">BigDecimal</span> <span class="variable">totalAmount</span> <span class="operator">=</span> orderList.stream().map(Order::getOrderPrice).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br><span class="line">    orderRequest.setTotalFee(BaseWxPayRequest.yuanToFen(String.valueOf(totalAmount)));</span><br><span class="line">    orderRequest.setNotifyUrl(properties.getOrderMiniNotifyUrl());</span><br><span class="line">    orderRequest.setNonceStr(UUIDUtils.getRandom(<span class="number">32</span>));</span><br><span class="line">     orderRequest.setOutTradeNo(Objects.nonNull(unifiedOrderParam.getOrderNo()) ? unifiedOrderParam.getOrderNo() : orderList.get(<span class="number">0</span>).getBatchNo());</span><br><span class="line">    orderRequest.setSpbillCreateIp(wechatMiniUtil.getClientIpAddress()); </span><br><span class="line">    <span class="comment">//获取当前用户的小程序openid</span></span><br><span class="line">    <span class="keyword">if</span> (userAuthUtil.getUserId().isPresent()) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getCurrentUserInfo();</span><br><span class="line">        orderRequest.setOpenid(user.getMiniOpenId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(orderRequest.getOpenid())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;请绑定微信小程序&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectRestResponse</span>&lt;&gt;().rel(<span class="literal">true</span>).data(wechatMiniUtil.createMiniOrder(orderRequest));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;小程序支付回调通知处理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mini/notify/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">miniOrderNotify</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;小程序支付回调通知处理:&#123;&#125;&quot;</span>, request);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">    result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">signStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 应答时间戳\n</span></span><br><span class="line">        signStr.append(request.getHeaders(<span class="string">&quot;Wechatpay-Timestamp&quot;</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 应答随机串\n</span></span><br><span class="line">        signStr.append(request.getHeaders(<span class="string">&quot;Wechatpay-Nonce&quot;</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 应答报文主体\n</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> request.getReader();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.append(str);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;微信小程序支付应答报文主体：&#123;&#125;&quot;</span>, builder);</span><br><span class="line">        signStr.append(builder.toString()).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 第一步：验证签名</span></span><br><span class="line">        <span class="keyword">if</span> (wechatMiniUtil.signVerify(request.getHeader(<span class="string">&quot;Wechatpay-Serial&quot;</span>), signStr.toString(), request.getHeader(<span class="string">&quot;Wechatpay-Signature&quot;</span>))) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;sign error&quot;</span>);</span><br><span class="line">            log.error(<span class="string">&quot;小程序签名错误或失效！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二步：解密密文</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">decryptOrder</span> <span class="operator">=</span> wechatMiniUtil.decryptOrder(builder.toString());</span><br><span class="line">        log.info(<span class="string">&quot;解密后支付信息：&#123;&#125;&quot;</span>, decryptOrder);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">notifyResult</span> <span class="operator">=</span> JSON.parseObject(decryptOrder);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;SUCCESS&quot;</span>.equals(notifyResult.getString(<span class="string">&quot;trade_state&quot;</span>))) &#123;</span><br><span class="line">            <span class="comment">// 支付成功...</span></span><br><span class="line">            <span class="comment">//根据支付信息查询已存的订单信息，进行状态改变等操作，根据业务操作</span></span><br><span class="line">                result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">                result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;小程序支付回调报错:&#123;&#125;&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：需要将miniOrderNotify接口暴露出去，应为调用createMiniOrder下单支付接口后微信会回调miniOrderNotify接口返回支付结果集。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用Dubbo-SpringBoot版</title>
    <url>/2020/03/24/Java%E4%BD%BF%E7%94%A8Dubbo-SpringBoot%E7%89%88/</url>
    <content><![CDATA[<p>谈一谈：<br>1.什么是Dubbo?<br>答：Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<span id="more"></span>
<p>2.Dubbo的常用的模块有哪些？<br>答：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模块                    描述</span><br><span class="line"></span><br><span class="line">dubbo-demo-api          定义服务接口</span><br><span class="line">dubbo-demo-provider     实现服务接口</span><br><span class="line">dubbo-demo-consumer     引用服务接口</span><br></pre></td></tr></table></figure>

<h1>正文</h1>

<h2 id="配置环境和创建项目"><a href="#配置环境和创建项目" class="headerlink" title="配置环境和创建项目"></a>配置环境和创建项目</h2><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>为什么是zookeeper?<br>答：因为需要zookeeper作为注册中心<br>安装教程：<a href="/2019/09/24/%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEzookeeper/" title="安装和配置zookeeper">安装和配置zookeeper</a></p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.1.png" alt="创建项目"></p>
<h3 id="父工程依赖"><a href="#父工程依赖" class="headerlink" title="父工程依赖"></a>父工程依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">modelVersion</span>></span>4.0.0<span class="tag"></<span class="name">modelVersion</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">groupId</span>></span>club.fallngsakura<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>school-dubbo<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>0.0.1-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"><!-- 定义模块 --></span></span><br><span class="line">    <span class="tag"><<span class="name">modules</span>></span></span><br><span class="line">        <span class="comment"><!--接口--></span></span><br><span class="line">        <span class="tag"><<span class="name">module</span>></span>school-interface<span class="tag"></<span class="name">module</span>></span></span><br><span class="line">        <span class="comment"><!--提供者--></span></span><br><span class="line">        <span class="tag"><<span class="name">module</span>></span>school-provider<span class="tag"></<span class="name">module</span>></span></span><br><span class="line">        <span class="comment"><!--消费者--></span></span><br><span class="line">        <span class="tag"><<span class="name">module</span>></span>school-consumer<span class="tag"></<span class="name">module</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">modules</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">packaging</span>></span>pom<span class="tag"></<span class="name">packaging</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">name</span>></span>school-dubbo<span class="tag"></<span class="name">name</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">description</span>></span>Demo project for Spring Boot<span class="tag"></<span class="name">description</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">parent</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">groupId</span>></span>org.springframework.boot<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">artifactId</span>></span>spring-boot-starter-parent<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">version</span>></span>2.2.4.RELEASE<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">relativePath</span>/></span> <span class="comment"><!-- lookup parent from repository --></span></span><br><span class="line">    <span class="tag"></<span class="name">parent</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><!--定义属性值--></span></span><br><span class="line">    <span class="tag"><<span class="name">properties</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">project.build.sourceEncoding</span>></span>UTF-8<span class="tag"></<span class="name">project.build.sourceEncoding</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">project.reporting.outputEncoding</span>></span>UTF-8<span class="tag"></<span class="name">project.reporting.outputEncoding</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">java.version</span>></span>1.8<span class="tag"></<span class="name">java.version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">properties</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><!--声明依赖--></span></span><br><span class="line">    <span class="tag"><<span class="name">dependencies</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.apache.dubbo<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>dubbo-spring-boot-starter<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>2.7.4.1<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.apache.curator<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>curator-framework<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>2.8.0<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.apache.curator<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>curator-recipes<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>2.8.0<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><!--springboot web模块支持--></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.springframework.boot<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>spring-boot-starter-web<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><!--springboot程序测试依赖，如果是自动创建项目默认添加--></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.springframework.boot<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>spring-boot-starter-test<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">scope</span>></span>test<span class="tag"></<span class="name">scope</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">exclusions</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">exclusion</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">groupId</span>></span>org.junit.vintage<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">artifactId</span>></span>junit-vintage-engine<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">                <span class="tag"></<span class="name">exclusion</span>></span></span><br><span class="line">            <span class="tag"></<span class="name">exclusions</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">dependencies</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">build</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">plugins</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">plugin</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">groupId</span>></span>org.apache.maven.plugins<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">artifactId</span>></span>maven-compiler-plugin<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">configuration</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">source</span>></span>$&#123;java.version&#125;<span class="tag"></<span class="name">source</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">target</span>></span>$&#123;java.version&#125;<span class="tag"></<span class="name">target</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">encoding</span>></span>$&#123;project.build.sourceEncoding&#125;<span class="tag"></<span class="name">encoding</span>></span></span><br><span class="line">                <span class="tag"></<span class="name">configuration</span>></span></span><br><span class="line">            <span class="tag"></<span class="name">plugin</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">plugins</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">build</span>></span></span><br><span class="line"><span class="tag"></<span class="name">project</span>></span></span><br></pre></td></tr></table></figure>

<h3 id="子项目依赖"><a href="#子项目依赖" class="headerlink" title="子项目依赖"></a>子项目依赖</h3><p>school-consumer：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">parent</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">groupId</span>></span>club.fallngsakura<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">artifactId</span>></span>school-dubbo<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">version</span>></span>0.0.1-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">parent</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">modelVersion</span>></span>4.0.0<span class="tag"></<span class="name">modelVersion</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>school-consumer<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>0.0.1-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">name</span>></span>school-consumer<span class="tag"></<span class="name">name</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">description</span>></span>Demo project for Spring Boot<span class="tag"></<span class="name">description</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">properties</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">java.version</span>></span>1.8<span class="tag"></<span class="name">java.version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">properties</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">project</span>></span></span><br></pre></td></tr></table></figure>

<p>school-interface：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">parent</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">groupId</span>></span>club.fallngsakura<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">artifactId</span>></span>school-dubbo<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">version</span>></span>0.0.1-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">parent</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">modelVersion</span>></span>4.0.0<span class="tag"></<span class="name">modelVersion</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>school-interface<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>0.0.1-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">name</span>></span>school-interface<span class="tag"></<span class="name">name</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">description</span>></span>Demo project for Spring Boot<span class="tag"></<span class="name">description</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">properties</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">java.version</span>></span>1.8<span class="tag"></<span class="name">java.version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">properties</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">project</span>></span></span><br></pre></td></tr></table></figure>

<p>school-provider：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">parent</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">groupId</span>></span>club.fallngsakura<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">artifactId</span>></span>school-dubbo<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">version</span>></span>0.0.1-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">parent</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">modelVersion</span>></span>4.0.0<span class="tag"></<span class="name">modelVersion</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>school-provider<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>0.0.1-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">name</span>></span>school-provider<span class="tag"></<span class="name">name</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">description</span>></span>Demo project for Spring Boot<span class="tag"></<span class="name">description</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">properties</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">java.version</span>></span>1.8<span class="tag"></<span class="name">java.version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">properties</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">project</span>></span></span><br></pre></td></tr></table></figure>

<h2 id="编写项目"><a href="#编写项目" class="headerlink" title="编写项目"></a>编写项目</h2><h3 id="编写api接口"><a href="#编写api接口" class="headerlink" title="编写api接口"></a>编写api接口</h3><p>创建学生实体类</p>
<p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.2.png" alt="创建学生实体类"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 学生id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Integer studentId;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 学生名称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String studentName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getStudentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> studentId;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentId</span><span class="params">(Integer studentId)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.studentId = studentId;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getStudentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> studentName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentName</span><span class="params">(String studentName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.studentName = studentName;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>创建接口<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.3.png" alt="创建接口"></p>
<p>SchoolService:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取学生信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>StudentService:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化学生</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Student <span class="title">initStudent</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> TimeoutException</span>;</span><br></pre></td></tr></table></figure>

<h3 id="提供者（provider）实现接口"><a href="#提供者（provider）实现接口" class="headerlink" title="提供者（provider）实现接口"></a>提供者（provider）实现接口</h3><p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.4.png" alt="实现接口"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id.equals(<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="string">"小明"</span>,id );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(id.equals(<span class="number">2</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="string">"小张"</span>,id );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"id错误"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="暴露提供者"><a href="#暴露提供者" class="headerlink" title="暴露提供者"></a>暴露提供者</h3><p>修改 ( provider ) spring boot配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dubbo:</span><br><span class="line">  ##暴露的服务名称</span><br><span class="line">  application:</span><br><span class="line">    name: school-provider</span><br><span class="line">  ##配置注册中心</span><br><span class="line">  registry:</span><br><span class="line">    address: 127.0.0.1:2181</span><br><span class="line">    protocol: zookeeper</span><br><span class="line">    check: false</span><br><span class="line">  ##配置通信协议</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo</span><br><span class="line">    port: -1</span><br><span class="line">  ##配置消费者启动是否检查</span><br><span class="line">  consumer:</span><br><span class="line">    check: false</span><br></pre></td></tr></table></figure>
<p>在实现类上添加Service注解<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.5.png" alt="添加Service注解"></p>
<p>在springboot启动器上添加EnableDubbo注解 并启动springboot<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.7.png" alt="添加EnableDubbo注解"></p>
<h3 id="消费者（consumer）调用提供者实现的接口"><a href="#消费者（consumer）调用提供者实现的接口" class="headerlink" title="消费者（consumer）调用提供者实现的接口"></a>消费者（consumer）调用提供者实现的接口</h3><p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.6.png" alt="调用接口"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从注册中心获取提供者</span></span><br><span class="line"><span class="meta">@Reference</span></span><br><span class="line"><span class="keyword">private</span> SchoolService schoolService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">initStudent</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> schoolService.getStudentById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="暴露消费者"><a href="#暴露消费者" class="headerlink" title="暴露消费者"></a>暴露消费者</h3><p>修改 ( consumer ) spring boot配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dubbo:</span><br><span class="line">  ##暴露的服务名称</span><br><span class="line">  application:</span><br><span class="line">    name: school-consumer</span><br><span class="line">  ##配置注册中心</span><br><span class="line">  registry:</span><br><span class="line">    address: 127.0.0.1:2181</span><br><span class="line">    protocol: zookeeper</span><br><span class="line">    check: false</span><br><span class="line">  ##配置通信协议</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo</span><br><span class="line">    port: -1</span><br><span class="line">  ##配置消费者启动是否检查</span><br><span class="line">  consumer:</span><br><span class="line">    check: false</span><br></pre></td></tr></table></figure>
<p>在实现类上添加Service注解<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.8.png" alt="添加Service注解"></p>
<p>在springboot启动器上添加EnableDubbo注解 并启动springboot<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.0.9.png" alt="添加EnableDubbo注解"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>提示：不知道安装dubbo-admin可以参考<a href="/2020/01/31/%E5%AE%89%E8%A3%85DubboAdmin-2.7%E7%89%88%E6%9C%AC/" title="安装DubboAdmin-2.7版本">安装DubboAdmin-2.7版本</a></p>
<p>启动提供者和消费者，在dubbo-admin上查看是否存在服务：<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.1.1.png" alt="查看服务"></p>
<p>调用方法：<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo/1.1.2.png" alt="查看服务"></p>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Dubbo</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现微信小程序登录功能</title>
    <url>/2022/11/24/Java%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>前言：本篇文章属于Java后端代码实现，并没有前端代码  </p>
</blockquote>
<ol>
<li><p>准备工作  </p>
<p>实现微信小程序登录功能先要获取到appid和secret，具体获取方式请看<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html">微信小程序账号申请指南</a></p>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>添加工具类依赖</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;5.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写微信小程序配置文件  </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Configuration</span><br><span class="line">public class WeChatMiniProperties &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 小程序appId</span><br><span class="line">    */</span><br><span class="line">    public static final String MP_APP_ID = &quot;XXX&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 小程序SECRET</span><br><span class="line">    */</span><br><span class="line">    public static final String MP_APP_SECRET = &quot;XXX&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写微信小程序工具类  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class WechatMiniUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 获取微信小程序用户SessionKey和OpendId</span><br><span class="line">    *</span><br><span class="line">    * @param code</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">    public JSONObject getSessionKeyOrOpenId(String code) &#123;</span><br><span class="line">        String requestUrl = &quot;https://api.weixin.qq.com/sns/jscode2session&quot;;</span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        //params</span><br><span class="line">        params.add(&quot;appid&quot;, WeChatMiniProperties.MP_APP_ID);</span><br><span class="line">        //小程序secret</span><br><span class="line">        params.add(&quot;secret&quot;, WeChatMiniProperties.MP_APP_SECRET);</span><br><span class="line">        //小程序端返回的code</span><br><span class="line">        params.add(&quot;js_code&quot;, code);</span><br><span class="line">        //默认参数</span><br><span class="line">        params.add(&quot;grant_type&quot;, &quot;authorization_code&quot;);</span><br><span class="line">        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(requestUrl);</span><br><span class="line">        URI uri = builder.queryParams(params).build().encode().toUri();</span><br><span class="line">        //发送post请求读取调用微信接口获取openid用户唯一标识</span><br><span class="line">        return JSONUtil.parseObj(new RestTemplate().getForObject(uri, String.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现登录类    </p>
<ul>
<li>关于请求中的code参数怎么获得，如果你的项目是前后端分离code属于前端调用wx.log获取的，全程你无需处理，不是前后端分离请查看微信小程序wx.log()API接口获取。  </li>
<li>关于unionid是什么，如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 UnionID 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 UnionID 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，UnionID是相同的。  </li>
<li>关于OpenId，知道了UnionID其实OpenId理解起来也就不难了，其作用就是用于区分微信下不同的应用程序。</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ApiOperation(&quot;微信小程序登录&quot;)</span><br><span class="line">@PostMapping(value = &quot;/mini/login&quot;)</span><br><span class="line">@Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRED)</span><br><span class="line">public ObjectRestResponse&lt;UserVo&gt; miniAppLogin(</span><br><span class="line">        @RequestParam(value = &quot;code&quot;, required = false) String code) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        log.info(&quot;微信小程序登录开始....&quot;);</span><br><span class="line">        // 1.开发者服务器 登录凭证校验接口</span><br><span class="line">        JSONObject SessionKeyOpenId = wechatMiniUtil.getSessionKeyOrOpenId(code);</span><br><span class="line">        // 2.接收微信接口服务 获取返回的参数</span><br><span class="line">        String openid = SessionKeyOpenId.getStr(&quot;openid&quot;);</span><br><span class="line">        String unionid = SessionKeyOpenId.getStr(&quot;unionid&quot;);</span><br><span class="line">        String session_key = SessionKeyOpenId.getStr(&quot;session_key&quot;);</span><br><span class="line">        String errcode = SessionKeyOpenId.getStr(&quot;errcode&quot;);</span><br><span class="line">        if (ObjectUtil.isNotEmpty(errcode)) &#123;</span><br><span class="line">            throw new WxErrorException(SessionKeyOpenId.getStr(&quot;errmsg&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        // 3.验证用户是否存在</span><br><span class="line">        User user = userService.getOne(</span><br><span class="line">                Wrappers.&lt;User&gt;lambdaQuery()</span><br><span class="line">                        .eq(User::getUnionid, unionid)</span><br><span class="line">        );</span><br><span class="line">        if (ObjectUtil.isEmpty(user)) &#123;</span><br><span class="line">            //微信小程序更新过后已经不能获取到用户信息了，只返回openid和unionid具体原因查看微信官方公告</span><br><span class="line">            user.setNickname(&quot;微信用户&quot; + IdUtil.objectId());</span><br><span class="line">            //user.setOpenid(openid); 这里需要区分微信openid和小程序的openid,不能使用同一个字段进行保存，以防影响其他端（比如APP）拉起支付导致的微信appid与小程序appid不一致问题</span><br><span class="line">            user.setMiniOpenId(openid);</span><br><span class="line">            user.setUnionId(unionid);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //登录需要变更openId</span><br><span class="line">            user.setMiniOpenId(openid);</span><br><span class="line">            user.setLastLoginTime(LocalDateTime.now());</span><br><span class="line">            userService.updateById(user);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(&quot;微信小程序登录用户信息：&#123;&#125;&quot;,user);</span><br><span class="line">        UserVo userVo = generateToken(user);</span><br><span class="line">        userVo.setSessionKey(session_key);</span><br><span class="line">        // 保存最新的token</span><br><span class="line">        redisUtils.putObject(Optional.of(userVo.getId().toString()),</span><br><span class="line">                userVo.getId().toString(), userVo.getToken());</span><br><span class="line">        return new ObjectRestResponse&lt;UserVo&gt;().rel(true).data(userVo);</span><br><span class="line">    &#125; catch (WxErrorException e) &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        throw new BizException(&quot;小程序登录失败，请稍后重试！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用阿里云短信服务</title>
    <url>/2020/02/16/Java%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>谈一谈：</p>
<p>1.什么是阿里云短信服务？<br>答：短信服务（Short Message Service）是阿里云为用户提供的一种通信服务的能力，支持向国内和国际快速发送验证码、短信通知和推广短信。 </p>
<span id="more"></span>

<p>2.阿里云短信服务的价格怎么样？<br>答：首次开通有免费100条的试用短信，但是有期限的，具体还得看阿里云短信服务。</p>
<p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/1.0.1.png" alt="阿里云短信服务的价格"></p>
<p>官网：<a href="https://www.aliyun.com/price/product?spm=5176.10695662.1128094.3.2a6b4beeyfj5I6#/sms/detail" target="_blank">了解价格</a></p>
<h1>正文</h1>

<h2 id="开通阿里云短信服务及配置"><a href="#开通阿里云短信服务及配置" class="headerlink" title="开通阿里云短信服务及配置"></a>开通阿里云短信服务及配置</h2><h3 id="开通阿里云短信服务"><a href="#开通阿里云短信服务" class="headerlink" title="开通阿里云短信服务"></a>开通阿里云短信服务</h3><p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/sms-img-1.0.1.png" alt="开通阿里云短信服务"></p>
<h3 id="添加签名"><a href="#添加签名" class="headerlink" title="添加签名"></a>添加签名</h3><p>提示：请选择验证码<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/sms-img-1.0.2.png" alt="添加签名"></p>
<h3 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h3><p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/sms-img-1.0.3.png" alt="添加模板"></p>
<h3 id="获取AccessKey-and-Access-Key-Secret"><a href="#获取AccessKey-and-Access-Key-Secret" class="headerlink" title="获取AccessKey and Access Key Secret"></a>获取AccessKey and Access Key Secret</h3><p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/sms-img-1.0.4.png" alt="获取AccessKey"></p>
<p>开通子账号<br>提示：如果你不想使用子账号可以选择继续使用AccessKey<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/sms-img-1.0.5.png" alt="开通子账号"></p>
<p>新建用户<br>注意：选择编程访问<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/sms-img-1.0.6.png" alt="新建用户"></p>
<p>保存AccessKey and Access Key Secret<br>注意：请勿将 AccessKey and Access Key Secret 告诉别人<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/sms/sms-img-1.0.7.png" alt="保存AccessKey"></p>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>提示：博主使用的是springboot项目</p>
<h3 id="导入Maven依赖"><a href="#导入Maven依赖" class="headerlink" title="导入Maven依赖"></a>导入Maven依赖</h3><p>提示：如果下载比较慢可以参考 <a href="/2020/01/31/%E5%AE%89%E8%A3%85DubboAdmin-2.7%E7%89%88%E6%9C%AC/" title="安装DubboAdmin-2.7版本">安装DubboAdmin-2.7版本</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- 阿里云SDK --></span></span><br><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">groupId</span>></span>com.aliyun<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">artifactId</span>></span>aliyun-java-sdk-core<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">version</span>></span>4.0.3<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"><span class="comment"><!-- fastJson --></span></span><br><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">groupId</span>></span>com.alibaba<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">artifactId</span>></span>fastjson<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">version</span>></span>1.2.38<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependency</span>></span></span><br></pre></td></tr></table></figure>

<h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>sms.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accessKeyId</span> =<span class="string">你的accessKeyId</span></span><br><span class="line"><span class="attr">accessKeySecret</span> =<span class="string">你的accessKeySecret</span></span><br><span class="line"><span class="attr">signName</span> =<span class="string">你的签名名称</span></span><br><span class="line"><span class="attr">templateCode</span> =<span class="string">你的模板code</span></span><br></pre></td></tr></table></figure>

<h3 id="编写Java代码"><a href="#编写Java代码" class="headerlink" title="编写Java代码"></a>编写Java代码</h3><p>AliyunSMSUtil 工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.MethodType;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ServerException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> Misaki RINNE </span></span><br><span class="line"><span class="comment">*<span class="doctag">@date</span> 2019-12-20 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunSMSUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String accessKeyId ; <span class="comment">//你的accessKeyId,</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String accessKeySecret; <span class="comment">//你的accessKeySecret</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String signName; <span class="comment">//阿里云控制台签名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String templateCode; <span class="comment">//明确需要使用哪个模板，可以从阿里云控制台查看</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties; <span class="comment">//SMS配置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加日志</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AliyunSMSUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取SMS配置</span></span><br><span class="line">            properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(<span class="keyword">new</span> InputStreamReader(AliyunSMSUtil<span class="class">.<span class="keyword">class</span></span></span><br><span class="line">                    .getClassLoader().getResourceAsStream("SMS.properties")));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuffer json = <span class="keyword">new</span> StringBuffer(<span class="string">"&#123;"</span>);</span><br><span class="line">        <span class="comment">//替换AccessKey</span></span><br><span class="line"></span><br><span class="line">        accessKeyId = properties.getProperty(<span class="string">"accessKeyId"</span>);</span><br><span class="line">        json.append(<span class="string">"accessKeyId:"</span>+accessKeyId);</span><br><span class="line"></span><br><span class="line">        accessKeySecret = properties.getProperty(<span class="string">"accessKeySecret"</span>);</span><br><span class="line">        json.append(<span class="string">",accessKeySecret:"</span>+accessKeySecret);</span><br><span class="line"></span><br><span class="line">        signName = properties.getProperty(<span class="string">"signName"</span>);</span><br><span class="line">        json.append(<span class="string">",signName:"</span>+signName+<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        templateCode = properties.getProperty(<span class="string">"templateCode"</span>);</span><br><span class="line">        json.append(<span class="string">",templateCode:"</span>+templateCode+<span class="string">"&#125;"</span>);</span><br><span class="line">        logger.info(String.valueOf(json));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 短信发送接口信息  支持批量发送 ps--目前签名信息仅设置一个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone        需要发送的电话号码，支持多个电话号码 格式为"13600000000,15000000000"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code <= 6 的数字或者英文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> true 代表发送成功  false 代表发送失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendMsg</span><span class="params">(String phone,String code)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> bool =<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(<span class="string">"default"</span>,accessKeyId,accessKeySecret);</span><br><span class="line"></span><br><span class="line">        IAcsClient client =<span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        CommonRequest request =<span class="keyword">new</span> CommonRequest();</span><br><span class="line"></span><br><span class="line">        request.setMethod(MethodType.POST);</span><br><span class="line"></span><br><span class="line">        request.setDomain(<span class="string">"dysmsapi.aliyuncs.com"</span>);</span><br><span class="line"></span><br><span class="line">        request.setVersion(<span class="string">"2017-05-25"</span>);<span class="comment">// 版本信息  已经固定  不能进行更改</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式；发送国际/港澳台消息时，接收号码格式为国际区号+号码，如“85200000000”</span></span><br><span class="line"></span><br><span class="line">        request.putQueryParameter(<span class="string">"PhoneNumbers"</span>, phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  阿里云控制台签名</span></span><br><span class="line"></span><br><span class="line">        request.putQueryParameter(<span class="string">"SignName"</span>, signName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 阿里云控制台模板编号</span></span><br><span class="line"></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateCode"</span>, templateCode);</span><br><span class="line"></span><br><span class="line">        request.setAction(<span class="string">"SendSms"</span>);<span class="comment">//系统规定参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模板内需要填充参数信息</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateParam"</span>, <span class="string">"&#123;\"code\":\""</span> + code + <span class="string">"\"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"调用阿里云短信服务请求 phone=&#123;&#125;，templateCode=&#123;&#125;,templateParam=&#123;&#125;"</span>, phone, templateCode, code);</span><br><span class="line"></span><br><span class="line">            CommonResponse response = client.getCommonResponse(request);</span><br><span class="line">            System.out.println(response.getData());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面是一个json格式转换工具，把String 转换为map 也可以转换为对象</span></span><br><span class="line">            Map map = JSON.parseObject(response.getData(),Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"OK"</span>.equals(map.get(<span class="string">"Code"</span>))) &#123;</span><br><span class="line"></span><br><span class="line">                bool =<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ServerException e) &#123;</span><br><span class="line"></span><br><span class="line">            logger.error(<span class="string">"阿里云短信服务异常:&#123;&#125;"</span>, e);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line"></span><br><span class="line">            logger.error(<span class="string">"连接阿里云短信异常:&#123;&#125;"</span>, e);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            logger.error(<span class="string">"json转换异常:&#123;&#125;"</span>, e);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bool;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类~"></a>编写测试类~</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//随机生成验证码</span></span><br><span class="line">       String code = String.valueOf((<span class="keyword">int</span>) (Math.random() * <span class="number">10000</span> + <span class="number">10000</span>)).substring(<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//推送到阿里云短信服务</span></span><br><span class="line">       AliyunSMSUtil.sendMsg(<span class="string">"实际手机号码"</span>,code);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>正常返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Message"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"RequestId"</span>: <span class="string">"873043ac-bcda-44db-9052-2e204c6ed20f"</span>,</span><br><span class="line">    <span class="attr">"BizId"</span>: <span class="string">"607300000000000000^0"</span>,</span><br><span class="line">    <span class="attr">"Code"</span>: <span class="string">"OK"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文章到这里就结束了呀 撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。❀❀❀ <del>~</del></p>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>linux部署springboot</title>
    <url>/2020/04/26/linux%E9%83%A8%E7%BD%B2springboot/</url>
    <content><![CDATA[<h1>正文</h1>

<p>springboot部署在linux上的常用方式：</p>
<p>1.springboot官方的方式：<br>在项目路径下输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package #清除target并打包</span><br><span class="line">mvn spring-boot:run #启动springboot项目</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>2.java -jar 方式（博主推荐）：<br>需要在pom上加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"><packaging>jar<&#x2F;packaging></span><br></pre></td></tr></table></figure>
<p>使用mvn打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>把生成的jar文件上传到服务器上后输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar jar完整包名(包括后缀)</span><br></pre></td></tr></table></figure>
<p>设置内存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar -Xms512M -Xmx2048M -XX:PermSize&#x3D;512M -XX:MaxPermSize&#x3D;1024M demo.jar</span><br></pre></td></tr></table></figure>
<p>说明：<br>Xms nad Xmx : 堆内存（对象使用的内存）<br>PermSize and -MaxPermSize : 永久内存（类使用的内存）</p>
<p>文章到这里就结束了呀 撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。❀❀❀ <del>~</del></p>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx使用geoip2限制地区访问（弃用）</title>
    <url>/2019/07/12/nginx%E4%BD%BF%E7%94%A8geoip2%E9%99%90%E5%88%B6%E5%9C%B0%E5%8C%BA%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>谈一谈：  </p>
<p>1.为什么要限制地区访问？<br>答：因为出于某些神秘原因，必须需要限制地区访问</p>
<p>2.什么是geoip2?<br>答：GeoIP2 服务能识别互联网用户的地点位置与其他特征，应用广泛，包括个性化定制内容、诈欺检测、广告定向、网站流量分析、执行规定、地理目标定位、地理围栏定位 (geo-fencing)以及数字版权管理。目前使用 GeoIP 更多是配合Nginx或Apache服务器进行日志分析获取网站访问量地域分布状况</p>

<span id="more"></span>

<h1>正文</h1>

<p>注意：重要的事情说三遍 nginx必须是编译安装！ nginx必须是编译安装！ nginx必须是编译安装！</p>
<h2 id="安装geoip2"><a href="#安装geoip2" class="headerlink" title="安装geoip2"></a>安装geoip2</h2><h3 id="geoip2扩展依赖"><a href="#geoip2扩展依赖" class="headerlink" title="geoip2扩展依赖"></a>geoip2扩展依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libmaxminddb-devel -y</span><br></pre></td></tr></table></figure>

<h3 id="安装geoip2-nginx模块"><a href="#安装geoip2-nginx模块" class="headerlink" title="安装geoip2-nginx模块"></a>安装geoip2-nginx模块</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/leev/ngx_http_geoip2_module/archive/3.2.tar.gz #下载geoip2 </span><br><span class="line"></span><br><span class="line">tar zxvf 3.2.tar.gz #解压geoip2</span><br><span class="line"></span><br><span class="line">pwd #查看目录</span><br></pre></td></tr></table></figure>

<h3 id="修改nginx-sh"><a href="#修改nginx-sh" class="headerlink" title="修改nginx.sh"></a>修改nginx.sh</h3><p>目录：/www/server/panel/install<br>使用宝塔编辑文件，找到./configure 后在其后面添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--add-module&#x3D;&#x2F;pwd查看的目录&#x2F;ngx_http_geoip2_module-3.2</span><br></pre></td></tr></table></figure>

<h3 id="编译nginx"><a href="#编译nginx" class="headerlink" title="编译nginx"></a>编译nginx</h3><p>注意：install后面的1.16是nginx版本（如：1.16.1 写作1.16），请对号入座</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh &#x2F;www&#x2F;server&#x2F;panel&#x2F;install&#x2F;nginx.sh install 1.16</span><br></pre></td></tr></table></figure>

<h3 id="下载GeoIP数据库"><a href="#下载GeoIP数据库" class="headerlink" title="下载GeoIP数据库"></a>下载GeoIP数据库</h3><p>官网需要登陆下载，博主已经下载并且解压好了，你只需要上传到服务器就行了<br>官网地址：<a herf="https://www.maxmind.com/en/accounts/242948/geoip/downloads">maxmind</a><br>下载地址：<a href="/download/GeoIP/GeoLite2-Country.mmdb">GeoLite2-Country</a> /<a href="/download/GeoIP/GeoLite2-City.mmdb">GeoLite2-City</a></p>
<h2 id="配置geoip"><a href="#配置geoip" class="headerlink" title="配置geoip"></a>配置geoip</h2><h3 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h3><p>在http下任意地方添加<br>注意：请勿添加到server下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## geoip    </span><br><span class="line">geoip2 &#x2F;你上传的地址&#x2F;GeoLite2-Country.mmdb &#123;            </span><br><span class="line">    $geoip2_data_country_code country iso_code;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在网站配置文件下添加"><a href="#在网站配置文件下添加" class="headerlink" title="在网站配置文件下添加"></a>在网站配置文件下添加</h3><p>在server头部添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map $geoip2_data_country_code $allowed_country &#123;        </span><br><span class="line">       default yes;         </span><br><span class="line">       CN no;        </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在server代码块下添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($allowed_country &#x3D; no) &#123;</span><br><span class="line">      #跳转页面 放回状态码 随便你怎么处理咯~</span><br><span class="line">      return 403;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>文章到这里就结束了呀 撒花★,°:.☆(￣▽￣)/$:.°★ 。❀❀❀ ~</p>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx实现负载均衡</title>
    <url>/2020/04/28/nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<p>nginx实现负载均衡不难很简单就一个 <code>upstream</code> 关键字！</p>
<p>废话不多说，直接动手<del>~</del></p>

<span id="more"></span>

<h3 id="了解-nginx-的负载均衡策略"><a href="#了解-nginx-的负载均衡策略" class="headerlink" title="了解 nginx 的负载均衡策略"></a>了解 nginx 的负载均衡策略</h3><p>提问：</p>
<p>1.什么是负载均衡？</p>
<p>答：扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。通俗一点就是，我的服务器满足不了请求量了，我不想花大价钱买高性能服务器，就买了多个廉价的服务器，分摊这些请求量</p>
<p>2.为什么要了解负载均衡的策略？  </p>
<p>答：你去医院看病，你不告诉医生病因，医生怎么给你看病呢？负载均衡策略就是为了更好的调用服务，避免了一些不必要的资源浪费</p>
<h4 id="轮询方式"><a href="#轮询方式" class="headerlink" title="轮询方式"></a>轮询方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream 变量名 &#123;</span><br><span class="line">        server ip:port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="权重方式（weight，数字越高调用机率越高）"><a href="#权重方式（weight，数字越高调用机率越高）" class="headerlink" title="权重方式（weight，数字越高调用机率越高）"></a>权重方式（weight，数字越高调用机率越高）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream 变量名 &#123;</span><br><span class="line">        server ip:port weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ip哈希-ip-hash"><a href="#ip哈希-ip-hash" class="headerlink" title="ip哈希(ip_hash)"></a>ip哈希(ip_hash)</h4><p>注意：ip_hash，可以和权重一起使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream 变量名 &#123;</span><br><span class="line">        ip_hash; </span><br><span class="line">        server ip:port weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最少连接-least-conn"><a href="#最少连接-least-conn" class="headerlink" title="最少连接(least_conn)"></a>最少连接(least_conn)</h4><p>注意：如字所意，请求连接最少的服务上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream 变量名 &#123;</span><br><span class="line">       least_conn;</span><br><span class="line">       server ip:port weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h4><p>注意：fair的作用就是，全部服务器中谁的响应最短，就请求最短的服务器，通俗就是谁的Ping低我就连接它</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream 变量名 &#123;</span><br><span class="line">       server ip:port weight&#x3D;1;</span><br><span class="line">       fair;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h3><p>在http代码块加入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream server_http &#123;</span><br><span class="line">        server 198.162.0.1:9503 weight&#x3D;1;</span><br><span class="line">        server 198.162.0.2:8811 weight&#x3D;2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在server代码块上添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">            if (!-e $request_filename)&#123;</span><br><span class="line">               proxy_pass http:&#x2F;&#x2F;server_http;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>文章到这里就结束了呀 撒花★,°:.☆(￣▽￣)/$:.°★ 。❀❀❀ ~</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Maven仓库为阿里镜像</title>
    <url>/2020/03/16/%E4%BF%AE%E6%94%B9Maven%E4%BB%93%E5%BA%93%E4%B8%BA%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>谈一谈：<br>1.为什么要切换为阿里镜像？<br>答：Maven下载一般都是访问外网下载，都是比较慢的。切换为阿里镜像就是国内下载速度那就比较快了。</p>

<span id="more"></span>

<h1>正文</h1>

<h3 id="修改maven配置文件"><a href="#修改maven配置文件" class="headerlink" title="修改maven配置文件"></a>修改maven配置文件</h3><p>打开maven的配置文件(windows机器一般在maven安装目录的conf/settings.xml)，在<mirrors></mirrors>标签中添加mirror子节点:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">mirror</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">id</span>></span>aliyunmaven<span class="tag"></<span class="name">id</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">mirrorOf</span>></span>*<span class="tag"></<span class="name">mirrorOf</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">name</span>></span>阿里云公共仓库<span class="tag"></<span class="name">name</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">url</span>></span>https://maven.aliyun.com/repository/public<span class="tag"></<span class="name">url</span>></span></span><br><span class="line"><span class="tag"></<span class="name">mirror</span>></span></span><br></pre></td></tr></table></figure>
<p>如果想使用其它代理仓库,可在<repositories></repositories>节点中加入对应的仓库使用地址。以使用spring代理仓为例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">repository</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">id</span>></span>spring<span class="tag"></<span class="name">id</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">url</span>></span>https://maven.aliyun.com/repository/spring<span class="tag"></<span class="name">url</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">releases</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">enabled</span>></span>true<span class="tag"></<span class="name">enabled</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">releases</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">snapshots</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">enabled</span>></span>true<span class="tag"></<span class="name">enabled</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">snapshots</span>></span></span><br><span class="line"><span class="tag"></<span class="name">repository</span>></span></span><br></pre></td></tr></table></figure>

<p>文章到这里就结束了呀 撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。❀❀❀ <del>~</del></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Hexo并部署备份至GitHub</title>
    <url>/2023/11/27/%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%A4%87%E4%BB%BDGitHub/</url>
    <content><![CDATA[<blockquote>
<p>开始之前请先安装好Node.js</p>
</blockquote>
<h2 id="第一步初始化Hexo"><a href="#第一步初始化Hexo" class="headerlink" title="第一步初始化Hexo"></a>第一步初始化Hexo</h2><h3 id="1-执行NPM命令安装Hexo"><a href="#1-执行NPM命令安装Hexo" class="headerlink" title="1.执行NPM命令安装Hexo"></a>1.执行NPM命令安装Hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="2-建站Hexo"><a href="#2-建站Hexo" class="headerlink" title="2.建站Hexo"></a>2.建站Hexo</h3><ol>
<li>初始化Hexo</li>
</ol>
<p>hexo init &lt;文件夹&gt; 文件夹可以不需要创建命令会自动创建好，文件夹名称可自定义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Hexo常用语句</li>
</ol>
<p>部署博客以及启动博客需要先生成博客文件，具体命令使用方法请看Hexo官方文档</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>hexo clean</td>
<td>清理静态文件</td>
</tr>
<tr>
<td>hexo config</td>
<td>配置文件</td>
</tr>
<tr>
<td>hexo deploy</td>
<td>部署博客</td>
</tr>
<tr>
<td>hexo server</td>
<td>启动服务</td>
</tr>
<tr>
<td>hexo generate</td>
<td>生成静态文件</td>
</tr>
</tbody></table>
<ol start="3">
<li>启动博客</li>
</ol>
<p>默认端口4000</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h2 id="部署备份Hexo"><a href="#部署备份Hexo" class="headerlink" title="部署备份Hexo"></a>部署备份Hexo</h2><blockquote>
<p>开始前请先在github上创建好github pages仓库</p>
</blockquote>
<h3 id="1-部署Hexo"><a href="#1-部署Hexo" class="headerlink" title="1.部署Hexo"></a>1.部署Hexo</h3><ol>
<li>配置Hexo配置文件</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;项目地址&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将博客文件提交至github仓库中</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="2-备份Hexo博客源文件"><a href="#2-备份Hexo博客源文件" class="headerlink" title="2.备份Hexo博客源文件"></a>2.备份Hexo博客源文件</h3><blockquote>
<p>注意.gitignore中需要将node_modules放开</p>
</blockquote>
<ol>
<li>初始化git</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>指定仓库</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yourName/repositoryname.git</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>切换分支</li>
</ol>
<blockquote>
<p>如果想要隐藏博客源文件可创建一个私有项目直接克隆，跳过此步骤</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b backup</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>提交源文件至分支</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;backup&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>GitHub Pages</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装DubboAdmin-2.7</title>
    <url>/2020/01/26/%E5%AE%89%E8%A3%85DubboAdmin-2-7/</url>
    <content><![CDATA[<p>谈一谈：</p>
<p>1.什么是dubbo-admin:<br>答：dubbo-admin一句话说就是管理提供者和消费者的web面板。</p>

<span id="more"></span>

<h1>正文</h1>

<h2 id="安装dubbo-admin"><a href="#安装dubbo-admin" class="headerlink" title="安装dubbo-admin"></a>安装dubbo-admin</h2><h3 id="下载dubbo-admin"><a href="#下载dubbo-admin" class="headerlink" title="下载dubbo-admin"></a>下载dubbo-admin</h3><p>下载地址：<a href="https://github.com/apache/dubbo-admin.git">GitHub</a></p>
<p>提示：如果觉得下载比较慢可以克隆到gitee在下载 </p>
<h3 id="添加淘宝镜像-（非常重要）"><a href="#添加淘宝镜像-（非常重要）" class="headerlink" title="添加淘宝镜像 （非常重要）"></a>添加淘宝镜像 （非常重要）</h3><p>修改 dubbo-admin-ui 下的 pom文件，添加以下内容：</p>
<p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo-admin/1.0.1.png" alt="添加淘宝镜像"> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"><downloadRoot>http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;<&#x2F;downloadRoot></span><br></pre></td></tr></table></figure>

<h3 id="修改dubbo-admin-server启动端口"><a href="#修改dubbo-admin-server启动端口" class="headerlink" title="修改dubbo-admin-server启动端口"></a>修改dubbo-admin-server启动端口</h3><p>修改dubbo-admin-server的application.properties文件：</p>
<p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo-admin/1.0.2.png" alt="修改配置文件"> </p>
<h2 id="生产设置"><a href="#生产设置" class="headerlink" title="生产设置"></a>生产设置</h2><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p>注意：需要配置maven环境变量，如果有报错Java报错不要紧  </p>
<p>在 dubbo-admin-develop 文件夹下cmd输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>注意：需要开启zookeeper服务<br>构建完后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn --projects dubbo-admin-server spring-boot:run</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd dubbo-admin-distribution&#x2F;target</span><br><span class="line"></span><br><span class="line">java -jar dubbo-admin-0.1.jar</span><br></pre></td></tr></table></figure>

<h3 id="打开dubbo-admin-面板"><a href="#打开dubbo-admin-面板" class="headerlink" title="打开dubbo-admin 面板"></a>打开dubbo-admin 面板</h3><p>注意：8001为我设置的端口，请改为你自己的<br>浏览器输入：<a href="http://127.0.0.1:8001">http://127.0.0.1:8001</a><br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/dubbo-admin/1.0.3.png" alt="打开dubbo-admin 面板"></p>
<p>文章到这里就结束了呀 撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。❀❀❀ <del>~</del></p>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装和配置zookeeper</title>
    <url>/2019/09/24/%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEzookeeper/</url>
    <content><![CDATA[<p>谈一谈：<br>什么是Zookeeper?<br>答：ZooKeeper的定义用一句话就能说清：分布式服务框架 Zookeeper – 管理分布式环境中的数据。</p>

<span id="more"></span>

<h2 id="下载Zookeeper"><a href="#下载Zookeeper" class="headerlink" title="下载Zookeeper"></a>下载Zookeeper</h2><p>注意：请下载带bin的文件  </p>
<p>官网：<a href="https://mirror.bit.edu.cn/apache/zookeeper">zookeeper</a></p>
<p>下载Apache ZooKeeper：<a href="https://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.6.0/apache-zookeeper-3.6.0-bin.tar.gz">点击下载</a></p>
<p>解压下载好的压缩包（仅需要apache-zookeeper-3.6.0-bin文件夹）<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/zookeeper/1.0.1.png" alt="apache-zookeeper-3.6.0-bin文件夹"></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>apache-zookeeper-3.6.0目录下添加 data 文件夹<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/zookeeper/1.0.2.png" alt="添加 data 文件夹"></p>
<p>在confg文件夹下找到zoo_sample.cfg 复制一份修改为 zoo.cfg并打开<br>添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改内容</span><br><span class="line">dataDir&#x3D; ..&#x2F;data</span><br></pre></td></tr></table></figure>

<h2 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h2><p>注意：需要配置Java环境变量</p>
<p>zookeeper - bin 目录下有2个启动文件<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/images/hexo/zookeeper/1.0.3.png" alt="启动文件"></p>
<h3 id="zkServer-cmd"><a href="#zkServer-cmd" class="headerlink" title="zkServer.cmd"></a>zkServer.cmd</h3><p>windows用户直接点击即可</p>
<h3 id="zkServer-sh-（博主使用方式）"><a href="#zkServer-sh-（博主使用方式）" class="headerlink" title="zkServer.sh （博主使用方式）"></a>zkServer.sh （博主使用方式）</h3><p>linux用户输入，windows用户可以使用git bash 运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;zkServer.sh start  #启动</span><br><span class="line">.&#x2F;zkServer.sh stop   #关闭</span><br><span class="line">.&#x2F;zkServer.sh status #状态</span><br></pre></td></tr></table></figure>

<p>文章到这里就结束了呀 撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。❀❀❀ <del>~</del></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔使用git-hooks部署hexo(弃用)</title>
    <url>/2020/02/18/%E5%AE%9D%E5%A1%94%E4%BD%BF%E7%94%A8git-hooks%E9%83%A8%E7%BD%B2hexo/</url>
    <content><![CDATA[<p>谈一谈：  </p>
<p>1.什么是hexo?<br>答：Hexo是一个快速, 简洁且高效的博客框架</p>
<p>2.什么是git hooks?<br>答：Git Hooks就是当Git（commit、push、receive）执行后触发的脚本</p>

<span id="more"></span>

<h1>正文</h1>

<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>注意：请先提前在本地安装好hexo</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<h3 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sSO http://download.bt.cn/install/new_install.sh && bash new_install.sh</span><br></pre></td></tr></table></figure>

<h2 id="搭建网站-and-配置git"><a href="#搭建网站-and-配置git" class="headerlink" title="搭建网站 and 配置git"></a>搭建网站 and 配置git</h2><h3 id="新建网站"><a href="#新建网站" class="headerlink" title="新建网站"></a>新建网站</h3><p>注意：PHP版本请选择静态！！！<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/bt-v2ray/Snipaste_2020-01-29_23-15-24.jpg" alt="新建网站"></p>
<h3 id="新建-hexo目录-and-hexo-git目录"><a href="#新建-hexo目录-and-hexo-git目录" class="headerlink" title="新建 hexo目录 and hexo.git目录"></a>新建 hexo目录 and hexo.git目录</h3><p><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/hexo/1.0.1.png" alt="新建目录"></p>
<p>注意：请把这两个目录修改为777，不然本地上传后无权限访问<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/hexo/1.0.2.png" alt="修改权限"></p>
<h3 id="初始化Git"><a href="#初始化Git" class="headerlink" title="初始化Git"></a>初始化Git</h3><p>shell切换到 <code>hexo.git</code> 文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init --bare</span><br></pre></td></tr></table></figure>
<p>cd 进去hooks文件夹，新建 <code>post-receive</code> 添加以下内容<br>注意：网站的路径为：你宝塔新建网站的路径/www/wwwroot/…</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/网站的路径/hexo --git-dir=/网站的路径/hexo.git checkout -f</span><br></pre></td></tr></table></figure>

<h3 id="修改网站目录为hexo文件夹"><a href="#修改网站目录为hexo文件夹" class="headerlink" title="修改网站目录为hexo文件夹"></a>修改网站目录为hexo文件夹</h3><p>注意：运行目录请不要修改<br><img src="https://misakinetwork.oss-cn-beijing.aliyuncs.com/wp/images/hexo/1.0.3.png" alt="修改网站目录为hexo文件夹"></p>
<h2 id="上传网站"><a href="#上传网站" class="headerlink" title="上传网站"></a>上传网站</h2><h3 id="修改本地config-yml"><a href="#修改本地config-yml" class="headerlink" title="修改本地config.yml"></a>修改本地config.yml</h3><p>注意：当你上传网站的时候会要求你输入密码！！！  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">用户名@服务器ip:/网站路径/hexo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>文章到这里就结束了呀 撒花★,°:.☆(￣▽￣)/$:.°★ 。❀❀❀ ~</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>git-hooks</tag>
      </tags>
  </entry>
</search>
